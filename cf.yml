AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Description: Environment
    Type: String
    MinLength: 1
    Default: production
    AllowedValues:
      - develop
      - production
  Product:
    Description: Product
    Type: String
    MinLength: 1
Mappings:
  Environments:
    develop:
      LogLevel: 'debug'
    production:
      LogLevel: 'info'
Resources:
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      Tags:
        - Key: Project
          Value: coral
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: !Ref Product
    DeletionPolicy: Retain
  PublishQueue:
    Type: AWS::SQS::Queue
  RoleWriteS3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WriteStagingS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
        - PolicyName: WriteUploadLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
        - PolicyName: PushPublishQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: '*'
  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "exports.upload = () => console.log('hello, world')"
      Description: Upload files to S3 bucket
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucket
          NODE_ENV: production
          LOG_LEVEL: !FindInMap [Environments, !Ref Environment, LogLevel]
      Handler: index.upload
      Role: !GetAtt RoleWriteS3.Arn
      Runtime: nodejs6.10
      Timeout: 300
      Tags:
        - Key: Project
          Value: coral
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: !Ref Product
  PublishLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "exports.upload = () => console.log('hello, world')"
      Description: Mark a file for publication
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucket
          PUBLISH_QUEUE: !Ref PublishQueue
          NODE_ENV: production
          LOG_LEVEL: !FindInMap [Environments, !Ref Environment, LogLevel]
      Handler: index.publish
      Role: !GetAtt RoleWriteS3.Arn
      Runtime: nodejs6.10
      Timeout: 300
      Tags:
        - Key: Project
          Value: coral
        - Key: Environment
          Value: !Ref Environment
        - Key: Product
          Value: !Ref Product
  CoralApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join [ '-', [ 'coral-api', !Ref Product, !Ref Environment ] ]
      Description: Coral Gallery API
      BinaryMediaTypes:
        - 'image/gif'
        - 'image/jpeg'
        - 'image/png'
      FailOnWarnings: true
  CoralApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt UploadLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref CoralApi
            - '/*'
  CoralApiPublishLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PublishLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref CoralApi
            - '/*'
  CoralApiProdStage:
    DependsOn:
      - ApiGatewayAccount
      - ApiGatewayDeployment
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/*'
      RestApiId: !Ref CoralApi
      StageName: LATEST
  CoralApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CoralApiLoggingRole.Arn
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UploadRequest
    Properties:
      RestApiId: !Ref CoralApi
      StageName: PlacholderStage
  GalleriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CoralApi
      ParentId: !GetAtt CoralApi.RootResourceId
      PathPart: galleries
  GalleryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CoralApi
      ParentId: !Ref GalleriesResource
      PathPart: '{gallery}'
  ImagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CoralApi
      ParentId: !Ref GalleryResource
      PathPart: images
  ImageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CoralApi
      ParentId: !Ref ImagesResource
      PathPart: '{image}'
  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CoralApi
      ParentId: !Ref ImageResource
      PathPart: publish
  UploadRequest:
    DependsOn:
      - CoralApiLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        Uri:
          !Join
            - ''
            - - 'arn:aws:apigateway:'
              - !Ref AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt UploadLambda.Arn
              - '/invocations'
        IntegrationResponses:
          - StatusCode: 201
            ResponseTemplates:
              application/json: "$input.json('$.result')"
          - StatusCode: 400
            SelectionPattern: 'Bad Request.*'
            ResponseTemplates:
              application/json: "{ \"message\": $input.json('$.errorMessage') }"
          - StatusCode: 500
            SelectionPattern: '[A-Za-z0-1].*'
            ResponseTemplates:
              application/json: "{ \"message\": \"An unexpected error occurred.\" }"
        RequestTemplates:
          image/gif: "{ \"file\": \"$input.body\", \"repo\": \"$input.params('gallery')\" }"
          image/jpeg: "{ \"file\": \"$input.body\", \"repo\": \"$input.params('gallery')\" }"
          image/png: "{ \"file\": \"$input.body\", \"repo\": \"$input.params('gallery')\" }"
      ResourceId: !Ref ImagesResource
      RestApiId: !Ref CoralApi
      MethodResponses:
        - StatusCode: 201
        - StatusCode: 400
        - StatusCode: 500
  PublishRequest:
    DependsOn:
      - CoralApiPublishLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        Uri:
          !Join
            - ''
            - - 'arn:aws:apigateway:'
              - !Ref AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt PublishLambda.Arn
              - '/invocations'
        IntegrationResponses:
          - StatusCode: 202
            ResponseTemplates:
              application/json: "$input.json('$.result')"
          - StatusCode: 400
            SelectionPattern: 'Bad Request.*'
            ResponseTemplates:
              application/json: "{ \"message\": $input.json('$.errorMessage') }"
          - StatusCode: 404
            SelectionPattern: 'Not Found.*'
            ResponseTemplates:
              application/json: "{ \"message\": $input.json('$.errorMessage') }"
          - StatusCode: 500
            SelectionPattern: '[A-Za-z0-1].*'
            ResponseTemplates:
              application/json: "{ \"message\": \"An unexpected error occurred.\" }"
        RequestTemplates:
          application/json: "{ \"name\": \"$input.params('image')\", \"repo\": \"$input.params('gallery')\" }"
          text/plain: "{ \"name\": \"$input.params('image')\", \"repo\": \"$input.params('gallery')\" }"
      ResourceId: !Ref StatusResource
      RestApiId: !Ref CoralApi
      MethodResponses:
        - StatusCode: 202
        - StatusCode: 400
        - StatusCode: 404
        - StatusCode: 500
